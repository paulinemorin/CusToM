function [Contact_detection, CoP_Pos] = ContactDetectionSole(filename, AnalysisParameters, Human_model,BiomechanicalModel, p_pelvis, r_pelvis, v0, w, dv0, dw, q, dq, ddq)
%   INPUT
%   - filename: name of the file to process (character string)
%   - AnalysisParameters: parameters of the musculoskeletal analysis,
%   automatically generated by the graphic interface 'Analysis' 
%   - BiomechanicalModel: musculoskeletal model
%   - ModelParameters: parameters of the musculoskeletal model, automatically
%   generated by the graphic interface 'GenerateParameters' 
%   OUTPUT
%   - ContactDetectionSole: results of the detection
%   of contact (see the Documentation for the structure)
%________________________________________________________
%
% Licence
% Toolbox distributed under GPL 3.0 Licence
%________________________________________________________
%
% Authors : Antoine Muller, Charles Pontonnier, Pauline Morin and
% Georges Dumont
%________________________________________________________

AnalysisParameters.ExternalForces.Options(1,1)={'LFoot'};
AnalysisParameters.ExternalForces.Options(2,1)={'RFoot'};

% Get the solid names on which the forces are applied
Solids = AnalysisParameters.ExternalForces.Options;

% Loading the Biomechanicalmodel file
load('BiomechanicalModel.mat')

% Solid list extracted from the OsteoarticularModel
Solid_list = {BiomechanicalModel.OsteoArticularModel.name}';

% Get the numbers of solids on which the forces are applied
[~,num_s]=intersect(Solid_list,Solids);

%% Loading data
data_full=importdata([filename '.txt']);

g=9.81;
f_cut=5;

%% Creation of a structure to add contact points
for i=1:numel(AnalysisParameters.Prediction.ContactPoint)
    Prediction(i).points_prediction_efforts = AnalysisParameters.Prediction.ContactPoint{i}; %#ok<AGROW>
end

Prediction=verif_Prediction_Humanmodel(Human_model,Prediction);
NbPointsPrediction = numel(Prediction);

%% Number frame
load([filename '/ExperimentalData.mat']); %#ok<LOAD>
time = ExperimentalData.Time;

freq=1/time(2);

[temp,nbframe ]= size(time);

%% Creation of a structure to add contact points
for i=1:numel(AnalysisParameters.Prediction.ContactPoint)
    Prediction(i).points_prediction_efforts = AnalysisParameters.Prediction.ContactPoint{i}; %#ok<AGROW>
end

Prediction=verif_Prediction_Humanmodel(Human_model,Prediction);
NbPointsPrediction = numel(Prediction);

%% Pressure data 
[nbframe_pressure, temp] = size(data_full.data);

Pressure_data=zeros(NbPointsPrediction, nbframe_pressure);
                    
table_correspondance_LF = [1 2 3 4 5 6  7  8  9  10 11 12 13 14 15 16;
                           1 2 3 4 5 6  7  8  9  10 11 12 13 14 15 16];
table_correspondance_RF = [1 2 3 4 5 6  7  8  9  10 11 12 13 14 15 16;
                           1 2 3 4 5 6  7  8  9  10 11 12 13 14 15 16];

table_correspondance_RF(1, :) = table_correspondance_RF(1, :)+16*ones(1,16);

for i = 1:16
    Pressure_data(table_correspondance_LF(1,i),:)=data_full.data(:,table_correspondance_LF(2,i)+1)';
    Pressure_data(table_correspondance_RF(1,i),:)=data_full.data(:,table_correspondance_LF(2,i)+23)';
end

%% Position CoP
liste=[22,23,44,45];
CoP=[data_full.data(:,liste)]';

%% NaN et bruit
Pressure_data(isnan(Pressure_data)|Pressure_data<=1.5)=0;
%Pressure_data(isnan(Pressure_data)|Pressure_data==0.25|Pressure_data==0.5)=0;
for i = 1:32
    for j=3:nbframe_pressure-2
        if Pressure_data(i,j) <= 2
            if (Pressure_data(i,j-1)==0||Pressure_data(i,j-2)==0) && (Pressure_data(i,j+1)==0||Pressure_data(i,j+2)==0)
                Pressure_data(i,j)=0;
            end
        end
    end
end


for i = 1:32
    for j=3:nbframe_pressure-2
        if Pressure_data(i,j) <= 2
            if (Pressure_data(i,j-1)==0||Pressure_data(i,j-2)==0) && (Pressure_data(i,j+1)==0||Pressure_data(i,j+2)==0)
                Pressure_data(i,j)=0;
            end
        end
    end
end

%% interpoler 200Hz
Pressure_200=zeros(NbPointsPrediction, 2*nbframe_pressure);

for i = 2 : nbframe_pressure-1
    Pressure_200(:,2*i-1) = Pressure_data(:,i);
    Pressure_200(:,2*i) = (Pressure_data(:,i)+Pressure_data(:,i+1))/2;
end
Pressure_200(:,2*nbframe_pressure)=Pressure_data(:,nbframe_pressure);

CoP_200=zeros(4, 2*nbframe_pressure);

for i = 2 : nbframe_pressure-1
    CoP_200(:,2*i-1) = CoP(:,i);
    CoP_200(:,2*i) = (CoP(:,i)+CoP(:,i+1))/2;

    if  or (CoP(1:2,i)==[0;0] , CoP(1:2,i+1)==[0;0])
        CoP_200(1:2,2*i)=[0;0];
    end
    if  or (CoP(3:4,i)==[0;0] , CoP(3:4,i+1)==[0;0])
        CoP_200(3:4,2*i)=[0;0];
    end
end
CoP_200(:,2*nbframe_pressure)=CoP(:,nbframe_pressure);


% %% External forces data
% LF_force=data_full.data(:,21)';
% RF_force=data_full.data(:,43)';
% 
% %% interpoler 200Hz
% LF_force_200=zeros(1, 2*nbframe_pressure);
% RF_force_200=zeros(1, 2*nbframe_pressure);
% 
% for i = 2 : nbframe_pressure-1
%     LF_force_200(2*i-1) = LF_force(:,i);
%     LF_force_200(2*i) = (LF_force(i)+LF_force(i+1))/2;
%     
%     RF_force_200(2*i-1) = RF_force(:,i);
%     RF_force_200(2*i) = (RF_force(i)+RF_force(i+1))/2;
% end
% LF_force_200(2*nbframe_pressure)=LF_force(nbframe_pressure);
% RF_force_200(2*nbframe_pressure)=RF_force(nbframe_pressure);

%% Acc data
LF_acc=data_full.data(:,18:20)*(g);
RF_acc=data_full.data(:,40:42)*(g);

%% interpoler 200Hz
LF_acc_200=zeros(2*nbframe_pressure,3);
RF_acc_200=zeros(2*nbframe_pressure,3);

for i = 2 : nbframe_pressure-1
    LF_acc_200(2*i-1,:) = LF_acc(i,:);
    LF_acc_200(2*i,:) = (LF_acc(i,:)+LF_acc(i+1,:))/2;
    
    RF_acc_200(2*i-1,:) = RF_acc(i,:);
    RF_acc_200(2*i,:) = (RF_acc(i,:)+RF_acc(i+1,:))/2;
end
LF_acc_200(2*nbframe_pressure,:)=LF_acc(nbframe_pressure,:);
RF_acc_200(2*nbframe_pressure,:)=RF_acc(nbframe_pressure,:);

LF_acc_200(isnan(LF_acc_200))=0;
RF_acc_200(isnan(RF_acc_200))=0;

LF_acc_200=filt_data(LF_acc_200, f_cut, freq);
RF_acc_200=filt_data(RF_acc_200, f_cut, freq);


%% Synchro acceleration
Acc_LF = zeros(nbframe,3);
Acc_RF = zeros(nbframe,3);

% [Foot_length,Foot_large] = Foot_size(filename);
% [Foot_length_insole,Foot_large_insole] = Foot_size_insole(Foot_length,Foot_large);

insole_foot_left = [0 -1 0;
    0  0 -1;
    1 0  0];

insole_foot_right = [0 -1 0;
    0  0 1;
    1 0  0];
% 
% X =[      0
%          0
%    -3.3006
%    -0.0231
%     0.0236
%          0
%          0
%          0
%     5.4926
%    -0.0500
%     0.0331
%          0];
% 
% 
% R1_l = rotx(X(1));
% R2_l = roty(X(2));
% R3_l = rotz(X(3));
% 
% R_l =R1_l*R2_l*R3_l;
% Po_l=[X(4);-X(5);X(6)];
% 
% insole_foot_left=zeros(4);
% 
% a = [0 -1 0;
%     0  0 1;
%     1 0  0];
% insole_foot_left(1:3,1:3)=a'*R_l*[1 0 0; 0 -1 0; 0 0 1];
% insole_foot_left(1:3,4) =a'*([Foot_length_insole/2 0 0]'+Po_l);
% insole_foot_left(4,4)=1;
% 
% R1_r = rotx(X(7));
% R2_r = roty(X(8));
% R3_r = rotz(X(9));
% 
% R_r = R1_r*R2_r*R3_r;
% Po_r=X(10:12);
% 
% 
% insole_foot_right=zeros(4);
% insole_foot_right(1:3,1:3)=a*R_r;
% insole_foot_right(1:3,4) =a*([Foot_length_insole/2 0 0]'+Po_r);
% insole_foot_right(4,4)=1;
% 
% insole_foot_left=a'*R_l*[1 0 0; 0 -1 0; 0 0 1];
% insole_foot_right=a'*R_r;
% 
% insole_foot{1} = insole_foot_left;
% insole_foot{2} = insole_foot_right;


for i=1:nbframe
    %attribution à chaque articulation de la position/vitesse/accélération (position/speed/acceleration for each joint)
    Human_model(1).p=p_pelvis(i,:)';
    Human_model(1).R=r_pelvis{i};
    Human_model(1).v0=v0(i,:)';
    Human_model(1).w=w(i,:)';
    Human_model(1).dv0=dv0(i,:)';
    Human_model(1).dw=dw(i,:)';
    for j=2:numel(Human_model)
        Human_model(j).q=q(i,j); %#ok<*SAGROW>
        Human_model(j).dq=dq(i,j);
        Human_model(j).ddq=ddq(i,j);
    end
    % Calcul positions / vitesses / accélération de chaque solide (computation of position/speed/acceleration for each solid)
    [Human_model,Prediction] = ForwardAllKinematicsPrediction(Human_model,Prediction,1); 

    Acc_LF(i,:) = (insole_foot_left)*inv(Human_model(num_s(1)).R)*[0;0;1]*g;
    Acc_RF(i,:) = (insole_foot_right)*inv(Human_model(num_s(2)).R)*[0;0;1]*g;

    V_LF(i,:) = (insole_foot_left)*inv(Human_model(num_s(1)).R)*Prediction(14).vitesse ;
    V_RF(i,:) = (insole_foot_right)*inv(Human_model(num_s(2)).R)*Prediction(30).vitesse ;
    
end

Acc_LF = Acc_LF(1:end-1,:)+diff(V_LF)/(1/freq);
Acc_RF = Acc_RF(1:end-1,:)+diff(V_RF)/(1/freq);


delay_R = finddelay(RF_acc_200,Acc_RF);
delay_L = finddelay(LF_acc_200,Acc_LF);

delay_R = delay_R(1);
delay_L = delay_L(1);

if -delay_L+nbframe>2*nbframe_pressure
    delay_L=delay_R;
end

if -delay_R+nbframe>2*nbframe_pressure
    delay_R=delay_L;
end
    

RF_acc_synch=RF_acc_200(-delay_R:-delay_R+nbframe,:);
LF_acc_synch=LF_acc_200(-delay_L:-delay_L+nbframe,:);

% 
% figure 
% hold on
% plot(RF_acc_synch(:,1))
% %plot(LF_acc_synch(:,1))
% %plot(Acc_LF(:,1))
% plot(Acc_RF(:,1))
% 
% figure 
% hold on
% %plot(RF_acc_synch(:,2))
% plot(LF_acc_synch(:,2))
% plot(Acc_LF(:,2))
% %plot(Acc_RF(:,2))
% 
% figure 
% hold on
% plot(RF_acc_synch(:,3))
% %plot(LF_acc_synch(:,3))
% %plot(Acc_LF(:,3))
% plot(Acc_RF(:,3))

Pressure_synch(1:16,:)=Pressure_200(1:16,-delay_L:-delay_L+nbframe-1);
Pressure_synch(17:32,:)=Pressure_200(17:32,-delay_R:-delay_R+nbframe-1);

CoP_synch(1:2,:)=CoP_200(1:2,-delay_L:-delay_L+nbframe-1);
CoP_synch(3:4,:)=CoP_200(3:4,-delay_R:-delay_R+nbframe-1);

%% Tableau contact from pressur synch
Contact_detection = isinf(Pressure_synch*inf);

%% Retirer point illogiques

%Tableau de groupement de points
Orteil_1=[9,10,11,12,13,14,15,16];
Orteil_2=Orteil_1+ones(1,length(Orteil_1))*16;
% 
% Avant_ext_1=[10,11,12,13,16,15];
% Avant_ext_2=Avant_ext_1+ones(1,length(Avant_ext_1))*16;

Talon_1=[1,2,3,4];
Talon_2=Talon_1+ones(1,length(Talon_1))*16;

Milieu_1=[5,6,7,8];
Milieu_2=Milieu_1+ones(1,length(Milieu_1))*16;

% Mi_1=[7,8];
% Mi_2=Mi_1+ones(1,length(Mi_1))*16;
% 
% Mid_1=[3,4];
% Mid_2=Mid_1+ones(1,length(Mid_1))*16;


% Gauche_1=[2,4,6];
% Gauche_2=Gauche_1+ones(1,length(Gauche_1))*16;
% 
% Droite_1=[1,3,5];
% Droite_2=Droite_1+ones(1,length(Droite_1))*16;


for i = 1 : nbframe
    if sum(Contact_detection(Orteil_1,i))<3
        Contact_detection(Orteil_1,i)=zeros(length(Orteil_1),1);
    end
    if sum(Contact_detection(Orteil_2,i))<3
        Contact_detection(Orteil_2,i)=zeros(length(Orteil_2),1);
    end

%     if sum(Contact_detection(Avant_ext_1,i))<5
%         Contact_detection(Avant_ext_1,i)=zeros(length(Avant_ext_1),1);
%     end
%     if sum(Contact_detection(Avant_ext_2,i))<5
%         Contact_detection(Avant_ext_2,i)=zeros(length(Avant_ext_2),1);
%     end
%     
    if sum(Contact_detection(Talon_1,i))<3
        Contact_detection(Talon_1,i)=zeros(length(Talon_1),1);
    end
    if sum(Contact_detection(Talon_2,i))<3
        Contact_detection(Talon_2,i)=zeros(length(Talon_2),1);
    end
    
    if sum(Contact_detection(Milieu_1,i))<3
        Contact_detection(Milieu_1,i)=zeros(length(Milieu_1),1);
    end
    if sum(Contact_detection(Milieu_2,i))<3
        Contact_detection(Milieu_2,i)=zeros(length(Milieu_2),1);
    end
    
   
    
end
% 
% for i = 1 : nbframe
%     if sum(Contact_detection(Orteil_1,i))<3
%         Contact_detection(Orteil_1,i)=zeros(length(Orteil_1),1);
%     end
%     if sum(Contact_detection(Orteil_2,i))<3
%         Contact_detection(Orteil_2,i)=zeros(length(Orteil_2),1);
%     end
% 
%     if sum(Contact_detection(Avant_ext_1,i))<5
%         Contact_detection(Avant_ext_1,i)=zeros(length(Avant_ext_1),1);
%     end
%     if sum(Contact_detection(Avant_ext_2,i))<5
%         Contact_detection(Avant_ext_2,i)=zeros(length(Avant_ext_2),1);
%     end
%     
%     if sum(Contact_detection(Talon_1,i))<3
%         Contact_detection(Talon_1,i)=zeros(length(Talon_1),1);
%     end
%     if sum(Contact_detection(Talon_2,i))<3
%         Contact_detection(Talon_2,i)=zeros(length(Talon_2),1);
%     end
%     
%     if sum(Contact_detection(Milieu_1,i))<3
%         Contact_detection(Milieu_1,i)=zeros(length(Milieu_1),1);
%     end
%     if sum(Contact_detection(Milieu_2,i))<3
%         Contact_detection(Milieu_2,i)=zeros(length(Milieu_2),1);
%     end
% end
%% CoP no contact = 0
CoP_Pos=CoP_synch;
% if AnalysisParameters.Prediction.ContactPoint{1,1} == 'LFootPrediction1'
%     for i = 1:nbframe
%         if sum( Contact_detection(1:14,i))==0
%             CoP_Pos(1:2,i)=[0 0];
%         end
%         if sum( Contact_detection(15:28,i))==0
%             CoP_Pos(3:4,i)=[0 0];
%         end
%     end
% else
%     for i = 1:nbframe
%         if sum( Contact_detection(1:14,i))==0
%             CoP_Pos(3:4,i)=[0 0];
%         end
%         if sum( Contact_detection(15:28,i))==0
%             CoP_Pos(1:2,i)=[0 0];
%         end
%     end
% end


Gauche=sum(Contact_detection(1:16,:),1);
Droite=sum(Contact_detection(17:32,:),1);



end

