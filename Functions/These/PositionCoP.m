function [CoP_Position] = PositionCoP(filename, AnalysisParameters, Human_model,BiomechanicalModel)
%   INPUT
%   - filename: name of the file to process (character string)
%   - AnalysisParameters: parameters of the musculoskeletal analysis,
%   automatically generated by the graphic interface 'Analysis' 
%   - BiomechanicalModel: musculoskeletal model
%   - ModelParameters: parameters of the musculoskeletal model, automatically
%   generated by the graphic interface 'GenerateParameters' 
%   OUTPUT
%   - ContactDetectionSole: results of the detection
%   of contact (see the Documentation for the structure)
%________________________________________________________
%
% Licence
% Toolbox distributed under GPL 3.0 Licence
%________________________________________________________
%
% Authors : Antoine Muller, Charles Pontonnier, Pauline Morin and
% Georges Dumont
%________________________________________________________

%% Loading data
data_full=importdata([filename '.txt']);

%% Number frame
load([filename '/ExperimentalData.mat']); %#ok<LOAD>
time = ExperimentalData.Time;

freq=1/time(2);

[temp,nbframe ]= size(time);

%% Creation of a structure to add CoP position
CoP_Position = zeros(nbframe,4);

%% Pressure data 
[nbframe_pressure, temp] = size(data_full.data);

liste=[22,23,44,45];
Pressure_CoP=[data_full.data(:,liste)];
Pressure_data=[data_full.data(:,liste)];


%% NaN et bruit
Pressure_data(isnan(Pressure_data)|Pressure_data==0.25)=0;
%Pressure_data(isnan(Pressure_data)|Pressure_data==0.25|Pressure_data==0.5)=0;
for i = 1:28
    for j=3:nbframe_pressure-2
        if Pressure_data(i,j) <= 1
            if (Pressure_data(i,j-1)==0||Pressure_data(i,j-2)==0) && (Pressure_data(i,j+1)==0||Pressure_data(i,j+2)==0)
                Pressure_data(i,j)=0;
            end
        end
    end
end

for i = 1:28
    for j=3:nbframe_pressure-2
        if Pressure_data(i,j) <= 1
            if (Pressure_data(i,j-1)==0||Pressure_data(i,j-2)==0) && (Pressure_data(i,j+1)==0||Pressure_data(i,j+2)==0)
                Pressure_data(i,j)=0;
            end
        end
    end
end

%% interpoler 200Hz
Pressure_200=zeros(NbPointsPrediction, 2*nbframe_pressure);

for i = 2 : nbframe_pressure-1
    Pressure_200(:,2*i-1) = Pressure_data(:,i);
    Pressure_200(:,2*i) = (Pressure_data(:,i)+Pressure_data(:,i+1))/2;   
end
Pressure_200(:,2*nbframe_pressure)=Pressure_data(:,nbframe_pressure);

%% External forces data
LF_force=data_full.data(:,21)';
RF_force=data_full.data(:,43)';

%% interpoler 200Hz
LF_force_200=zeros(1, 2*nbframe_pressure);
RF_force_200=zeros(1, 2*nbframe_pressure);

for i = 2 : nbframe_pressure-1
    LF_force_200(2*i-1) = LF_force(:,i);
    LF_force_200(2*i) = (LF_force(i)+LF_force(i+1))/2;
    
    RF_force_200(2*i-1) = RF_force(:,i);
    RF_force_200(2*i) = (RF_force(i)+RF_force(i+1))/2;
end
LF_force_200(2*nbframe_pressure)=LF_force(nbframe_pressure);
RF_force_200(2*nbframe_pressure)=RF_force(nbframe_pressure);



%% External forces from platform
filename_c3d=[filename '.c3d'];
AnalysisParameters = ...
      AnalysisExternalForces( AnalysisParameters, ...
     filename_c3d);        

[ExternalForcesComputationResults] = AnalysisParameters.ExternalForces.Method(filename, BiomechanicalModel, AnalysisParameters); 

% Get the solid names on which the forces are applied
Solids = AnalysisParameters.ExternalForces.Options;

% Solid list extracted from the OsteoarticularModel
Solid_list = {BiomechanicalModel.OsteoArticularModel.name}';

% Get the numbers of solids on which the forces are applied
[~,num_s]=intersect(Solid_list,Solids);

% Load experimental forces and forces from prediction algorithm.
GRF_Xp=ExternalForcesComputationResults.ExternalForcesExperiments;

% Get the forces applied on the solids
for ii=1:numel(num_s)
    cur_s=num_s(ii); %LFoot and RFoot
    for jj_f=1:nbframe
        % Experimental results
        F_Xp.(Solids{ii})(jj_f,:) = GRF_Xp(jj_f).fext(cur_s).fext(:,1)';
    end
end

start_L = 950;
start_R = 650;
stop_L = 1150;
stop_R = 850;

delay_R = finddelay(RF_force_200(start_R:stop_R),F_Xp.RFoot(:,end));
delay_L = finddelay(LF_force_200(start_L:stop_L),F_Xp.LFoot(:,end));

%delay=floor(mean([delay_RF,delay_LF]));


RF_force_synch=RF_force_200(:,start_R-delay_R:start_R-delay_R+nbframe);
LF_force_synch=LF_force_200(:,start_L-delay_L:start_L-delay_L+nbframe);

figure 
hold on
plot(RF_force_synch)
plot(LF_force_synch)
plot(F_Xp.LFoot(:,end))
plot(F_Xp.RFoot(:,end))



if AnalysisParameters.Prediction.ContactPoint{1,1} == 'LFootPrediction1'
    Pressure_synch(1:14,:)=Pressure_200(1:14,start_L-delay_L:start_L-delay_L+nbframe-1);
    Pressure_synch(15:28,:)=Pressure_200(15:28,start_R-delay_R:start_R-delay_R+nbframe-1);
else
    Pressure_synch(1:14,:)=Pressure_200(1:14,start_R-delay_R:start_R-delay_R+nbframe-1);
    Pressure_synch(15:28,:)=Pressure_200(15:28,start_L-delay_L:start_L-delay_L+nbframe-1);
end


%% Tableau contact from pressur synch
Contact_detection = isinf(Pressure_synch*inf);

%% Retirer point illogiques

% Tableau de groupement de points
Orteil_1=[5,12];
Orteil_2=Orteil_1+ones(1,length(Orteil_1))*14;

Avant_ext_1=[6,7,8,9,10,14,13,11];
Avant_ext_2=Avant_ext_1+ones(1,length(Avant_ext_1))*14;

Talon_1=[1,2];
Talon_2=Talon_1+ones(1,length(Talon_1))*14;

Milieu_1=[3,4];
Milieu_2=Milieu_1+ones(1,length(Milieu_1))*14;

Gauche_1=[1,3,9];
Gauche_2=Gauche_1+ones(1,length(Gauche_1))*14;

Droite_1=[2,4,5];
Droite_2=Droite_1+ones(1,length(Droite_1))*14;


for i = 1 : nbframe
    if sum(Contact_detection(Orteil_1,i))==1
        Contact_detection(Orteil_1,i)=zeros(length(Orteil_1),1);
    end
    if sum(Contact_detection(Orteil_2,i))==1
        Contact_detection(Orteil_2,i)=zeros(length(Orteil_2),1);
    end
    
    if sum(Contact_detection(Avant_ext_1,i))<4
        Contact_detection(Avant_ext_1,i)=zeros(length(Avant_ext_1),1);
    end
    if sum(Contact_detection(Avant_ext_2,i))<4
        Contact_detection(Avant_ext_2,i)=zeros(length(Avant_ext_2),1);
    end
    
    if sum(Contact_detection(Talon_1,i))==1
        Contact_detection(Talon_1,i)=zeros(length(Talon_1),1);
    end
    if sum(Contact_detection(Talon_2,i))==1
        Contact_detection(Talon_2,i)=zeros(length(Talon_2),1);
    end
    
    if sum(Contact_detection(Milieu_1,i))==1
        Contact_detection(Milieu_1,i)=zeros(length(Milieu_1),1);
    end
    if sum(Contact_detection(Milieu_2,i))==1
        Contact_detection(Milieu_2,i)=zeros(length(Milieu_2),1);
    end
    
    if sum(Contact_detection(Gauche_1,i))==1
        Contact_detection(3,i)=0;
    end
    if sum(Contact_detection(Gauche_2,i))==1
        Contact_detection(17,i)=0;
    end
    
    if sum(Contact_detection(Droite_1,i))==1
        Contact_detection(4,i)=0;
    end
    if sum(Contact_detection(Droite_2,i))==1
        Contact_detection(18,i)=0;
    end
end


end

