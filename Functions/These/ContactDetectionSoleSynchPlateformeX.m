function [Contact_detection, CoP_Pos] = ContactDetectionSoleSynchPlateformeX(filename, AnalysisParameters, Human_model,BiomechanicalModel, p_pelvis, r_pelvis, v0, w, dv0, dw, q, dq, ddq, X)
%   INPUT
%   - filename: name of the file to process (character string)
%   - AnalysisParameters: parameters of the musculoskeletal analysis,
%   automatically generated by the graphic interface 'Analysis' 
%   - BiomechanicalModel: musculoskeletal model
%   - ModelParameters: parameters of the musculoskeletal model, automatically
%   generated by the graphic interface 'GenerateParameters' 
%   OUTPUT
%   - ContactDetectionSole: results of the detection
%   of contact (see the Documentation for the structure)
%________________________________________________________
%
% Licence
% Toolbox distributed under GPL 3.0 Licence
%________________________________________________________
%
% Authors : Antoine Muller, Charles Pontonnier, Pauline Morin and
% Georges Dumont
%________________________________________________________


% Loading external forces computation
load(fullfile(filename,'ExternalForcesComputationResults.mat'))


AnalysisParameters.ExternalForces.Options(1,1)={'LFoot'};
AnalysisParameters.ExternalForces.Options(2,1)={'RFoot'};

% Get the solid names on which the forces are applied
Solids = AnalysisParameters.ExternalForces.Options;

% Loading the Biomechanicalmodel file
load('BiomechanicalModel.mat')

% Solid list extracted from the OsteoarticularModel
Solid_list = {BiomechanicalModel.OsteoArticularModel.name}';

% Get the numbers of solids on which the forces are applied
[~,num_s]=intersect(Solid_list,Solids);



%% Loading data
data_full=importdata([filename '.txt']);

g=9.81;
f_cut=5;

%% Number frame
load([filename '/ExperimentalData.mat']); %#ok<LOAD>
time = ExperimentalData.Time;

freq=1/time(2);

[temp,nbframe ]= size(time);

%% Creation of a structure to add contact points
for i=1:numel(AnalysisParameters.Prediction.ContactPoint)
    Prediction(i).points_prediction_efforts = AnalysisParameters.Prediction.ContactPoint{i}; %#ok<AGROW>
end

Prediction=verif_Prediction_Humanmodel(Human_model,Prediction);
NbPointsPrediction = numel(Prediction);

%% Pressure data 
[nbframe_pressure, temp] = size(data_full.data);

Pressure_data=zeros(NbPointsPrediction, nbframe_pressure);
                       
table_correspondance_LF = [1 2 3 4 5 6  7  8  9  10 11 12 13 14 15 16;
                           1 2 3 4 5 6  7  8  9  10 11 12 13 14 15 16];
table_correspondance_RF = [1 2 3 4 5 6  7  8  9  10 11 12 13 14 15 16;
                           1 2 3 4 5 6  7  8  9  10 11 12 13 14 15 16];

table_correspondance_RF(1, :) = table_correspondance_RF(1, :)+16*ones(1,16);

for i = 1:16
    Pressure_data(table_correspondance_LF(1,i),:)=data_full.data(:,table_correspondance_LF(2,i)+1)';
    Pressure_data(table_correspondance_RF(1,i),:)=data_full.data(:,table_correspondance_LF(2,i)+23)';
end

%% Position CoP
liste=[22,23,44,45];
CoP=[data_full.data(:,liste)]';

%% NaN et bruit, les semelles ont un code qui détecte le contact et 
%renseigne la position du CoP à l'origine s'il n'y a pas de contact
for i = 1 : nbframe_pressure
    if CoP(1,i)==0 && CoP(2,i)==0
        Pressure_data(1:16,i)=zeros(16,1);
    end
    if CoP(3,i)==0 && CoP(4,i)==0
        Pressure_data(17:32,i)=zeros(16,1);
    end
end

Pressure_data(isnan(Pressure_data)|Pressure_data<=1.5)=0;

for i = 1:32
    for j=3:nbframe_pressure-2
        if (Pressure_data(i,j-1)==0||Pressure_data(i,j-2)==0) && (Pressure_data(i,j+1)==0||Pressure_data(i,j+2)==0)
            Pressure_data(i,j)=0;
        end
    end
end


%% interpoler 200Hz
Pressure_200=zeros(NbPointsPrediction, 2*nbframe_pressure);

for i = 1 : nbframe_pressure-1
    Pressure_200(:,2*i-1) = Pressure_data(:,i);
    Pressure_200(:,2*i) = (Pressure_data(:,i)+Pressure_data(:,i+1))/2;
end
Pressure_200(:,2*nbframe_pressure)=Pressure_data(:,nbframe_pressure);


CoP_200=zeros(4, 2*nbframe_pressure);

for i = 1 : nbframe_pressure-1
    CoP_200(:,2*i-1) = CoP(:,i);
    CoP_200(:,2*i) = (CoP(:,i)+CoP(:,i+1))/2;

    if  or (CoP(1:2,i)==[0;0] , CoP(1:2,i+1)==[0;0])
        CoP_200(1:2,2*i)=[0;0];
    end
    if  or (CoP(3:4,i)==[0;0] , CoP(3:4,i+1)==[0;0])
        CoP_200(3:4,2*i)=[0;0];
    end
end
CoP_200(:,2*nbframe_pressure)=CoP(:,nbframe_pressure);

for i = 1 : nbframe_pressure*2
    if CoP_200(1,i)==0 && CoP_200(2,i)==0
        Pressure_200(1:16,i)=zeros(16,1);
    end
    if CoP_200(3,i)==0 && CoP_200(4,i)==0
        Pressure_200(17:32,i)=zeros(16,1);
    end
end


%% External forces data
LF_force=data_full.data(:,21)';
RF_force=data_full.data(:,43)';

% %% interpoler 200Hz
% LF_force_200=zeros(1, 2*nbframe_pressure);
% RF_force_200=zeros(1, 2*nbframe_pressure);
% 
% for i = 1 : nbframe_pressure-1
%     LF_force_200(2*i-1) = LF_force(:,i);
%     LF_force_200(2*i) = (LF_force(i)+LF_force(i+1))/2;
%     
%     RF_force_200(2*i-1) = RF_force(:,i);
%     RF_force_200(2*i) = (RF_force(i)+RF_force(i+1))/2;
% end
% LF_force_200(2*nbframe_pressure)=LF_force(nbframe_pressure);
% RF_force_200(2*nbframe_pressure)=RF_force(nbframe_pressure);
% 
% LF_force_200(isnan(LF_force_200))=0;
% RF_force_200(isnan(RF_force_200))=0;
% 
% LF_force_200=filt_data(LF_force_200', f_cut, freq)';
% RF_force_200=filt_data(RF_force_200', f_cut, freq)';

LF_force_200=sum(Pressure_200(1:16,:)*10);
RF_force_200=sum(Pressure_200(17:32,:)*10);

LF_force_200=filt_data(LF_force_200', f_cut, freq)';
RF_force_200=filt_data(RF_force_200', f_cut, freq)';

%% Acc data
LF_acc=data_full.data(:,18:20)*(g);
RF_acc=data_full.data(:,40:42)*(g);

%% interpoler 200Hz
LF_acc_200=zeros(2*nbframe_pressure,3);
RF_acc_200=zeros(2*nbframe_pressure,3);

for i = 2 : nbframe_pressure-1
    LF_acc_200(2*i-1,:) = LF_acc(i,:);
    LF_acc_200(2*i,:) = (LF_acc(i,:)+LF_acc(i+1,:))/2;
    
    RF_acc_200(2*i-1,:) = RF_acc(i,:);
    RF_acc_200(2*i,:) = (RF_acc(i,:)+RF_acc(i+1,:))/2;
end
LF_acc_200(2*nbframe_pressure,:)=LF_acc(nbframe_pressure,:);
RF_acc_200(2*nbframe_pressure,:)=RF_acc(nbframe_pressure,:);

LF_acc_200(isnan(LF_acc_200))=0;
RF_acc_200(isnan(RF_acc_200))=0;

LF_acc_200=filt_data(LF_acc_200, f_cut, freq);
RF_acc_200=filt_data(RF_acc_200, f_cut, freq);


%% Synchro acceleration
Acc_LF = zeros(nbframe,3);
Acc_RF = zeros(nbframe,3);

% [Foot_length,Foot_large] = Foot_size(filename);
% [Foot_length_insole,Foot_large_insole] = Foot_size_insole(Foot_length,Foot_large);

insole_foot_left = [0 -1 0;
    0  0 -1;
    1 0  0];

insole_foot_right = [0 -1 0;
    0  0 1;
    1 0  0];

% a = [0 -1 0;
%     0  0 -1;
%     1 0  0];

R1_l = rotx(X(1));
R2_l = roty(X(2));
R3_l = rotz(X(3));

Rx.(Solids{1}) =R3_l*R2_l*R1_l;
Locx.(Solids{1})=X(4:6);

R1_r = rotx(X(7));
R2_r = roty(X(8));
R3_r = rotz(X(9));

Rx.(Solids{2}) = R3_r*R2_r*R1_r;
Locx.(Solids{2})=X(10:12);


% insole_foot_left(1:3,1:3)=a'*R_l*[1 0 0; 0 -1 0; 0 0 1];
% insole_foot_left(1:3,4) =a'*([Foot_length_insole/2 0 0]'+Po_l);
% insole_foot_left(4,4)=1;
% 
% 
% 
% insole_foot_right=zeros(4);
% insole_foot_right(1:3,1:3)=a*R_r;
% insole_foot_right(1:3,4) =a*([Foot_length_insole/2 0 0]'+Po_r);
% insole_foot_right(4,4)=1;
% 
% insole_foot_left=a'*R_l*[1 0 0; 0 -1 0; 0 0 1];
% insole_foot_right=a'*R_r;
% 
% insole_foot{1} = insole_foot_left;
% insole_foot{2} = insole_foot_right;


for i=1:nbframe
    %attribution à chaque articulation de la position/vitesse/accélération (position/speed/acceleration for each joint)
    Human_model(1).p=p_pelvis(i,:)';
    Human_model(1).R=r_pelvis{i};
    Human_model(1).v0=v0(i,:)';
    Human_model(1).w=w(i,:)';
    Human_model(1).dv0=dv0(i,:)';
    Human_model(1).dw=dw(i,:)';
    for j=2:numel(Human_model)
        Human_model(j).q=q(i,j); %#ok<*SAGROW>
        Human_model(j).dq=dq(i,j);
        Human_model(j).ddq=ddq(i,j);
    end
    % Calcul positions / vitesses / accélération de chaque solide (computation of position/speed/acceleration for each solid)
    [Human_model,Prediction] = ForwardAllKinematicsPrediction(Human_model,Prediction,1); 
    
    Acc_LF(i,:) = Rx.(Solids{1})*(insole_foot_left)*inv(Human_model(num_s(1)).R)*[0;0;1]*g;
    Acc_RF(i,:) = Rx.(Solids{2})*(insole_foot_right)*inv(Human_model(num_s(2)).R)*[0;0;1]*g;

    V_LF(i,:) =  Rx.(Solids{1})*(insole_foot_left)*inv(Human_model(num_s(1)).R)*Prediction(14).vitesse ;
    V_RF(i,:) = Rx.(Solids{2})*(insole_foot_right)*inv(Human_model(num_s(2)).R)*Prediction(30).vitesse ;
    
end

Acc_LF = Acc_LF(1:end-1,:)+diff(V_LF)/(1/freq);
Acc_RF = Acc_RF(1:end-1,:)+diff(V_RF)/(1/freq);


delay_R = finddelay(RF_acc_200,Acc_RF);
delay_L = finddelay(LF_acc_200,Acc_LF);

delay_R = delay_R(1);
delay_L = delay_L(1);

if -delay_L+nbframe>2*nbframe_pressure
    delay_L=delay_R;
end

if -delay_R+nbframe>2*nbframe_pressure
    delay_R=delay_L;
end
    

RF_acc_synch=RF_acc_200(-delay_R:-delay_R+nbframe,:);
LF_acc_synch=LF_acc_200(-delay_L:-delay_L+nbframe,:);

% 
% figure 
% hold on
% %plot(RF_acc_synch(:,1))
% plot(LF_acc_synch(:,1))
% plot(Acc_LF(:,1))
% %plot(Acc_RF(:,1))
% 
% figure 
% hold on
% %plot(RF_acc_synch(:,2))
% plot(LF_acc_synch(:,2))
% plot(Acc_LF(:,2))
% %plot(Acc_RF(:,2))

% figure 
% hold on
% %plot(RF_acc_synch(:,3))
% plot(LF_acc_synch(:,3))
% plot(Acc_LF(:,3))
% %plot(Acc_RF(:,3))



%% External forces from platform
filename_c3d=[filename '.c3d'];
% AnalysisParameters = ...
%       AnalysisExternalForces( AnalysisParameters, ...
%      filename_c3d);        

%[ExternalForcesComputationResults] = AnalysisParameters.ExternalForces.Method(filename, BiomechanicalModel, AnalysisParameters); 

% Get the solid names on which the forces are applied
%Solids = AnalysisParameters.ExternalForces.Options;

% Solid list extracted from the OsteoarticularModel
%Solid_list = {BiomechanicalModel.OsteoArticularModel.name}';

% Get the numbers of solids on which the forces are applied
%[~,num_s]=intersect(Solid_list,Solids);

% Load experimental forces and forces from prediction algorithm.
GRF_Xp=ExternalForcesComputationResults.ExternalForcesExperiments;

% Get the forces applied on the solids
for ii=1:numel(num_s)
    cur_s=num_s(ii); %LFoot and RFoot
    for jj_f=1:nbframe
        % Experimental results
        F_Xp.(Solids{ii})(jj_f,:) = GRF_Xp(jj_f).fext(cur_s).fext(:,1)';
    end
end

 start_L = - delay_L-25;
 start_R = -delay_R-25;
 stop_L =  - delay_L+25+nbframe;
 stop_R = - delay_R+25+nbframe;

 temp=0;
 a=50;
 if nbframe>2*a
     temp = a;
 end
 
 start_L = - delay_L+temp;
 start_R = -delay_R+temp;
 stop_L =  - delay_L-temp+nbframe;
 stop_R = - delay_R-temp+nbframe;

 
delay_RF = finddelay(RF_force_200(start_R:stop_R),F_Xp.RFoot(:,end));
delay_LF = finddelay(LF_force_200(start_L:stop_L),F_Xp.LFoot(:,end));

if start_R-delay_RF+nbframe-1 > length(RF_force_200)
    delay_RF=delay_LF;
    RF_acc_synch=RF_acc_200(-delay_R:-delay_R+nbframe,:);
    start_R = -delay_R-25;
    stop_R = - delay_R+25+nbframe;
    start_R = -delay_R+temp;
    stop_R = - delay_R-temp+nbframe;
    delay_RF = finddelay(RF_force_200(start_R:stop_R),F_Xp.RFoot(:,end));
end

if  start_R-delay_RF+nbframe-1 > length(RF_force_200)
    delay_RF=delay_LF;
end

if start_L-delay_LF+nbframe-1 >  length(LF_force_200)
    delay_LF=delay_RF;
    LF_acc_synch=LF_acc_200(-delay_L:-delay_L+nbframe,:);
    start_L = - delay_L-25;
    stop_L =  - delay_L+25+nbframe;
    start_L = - delay_L+temp;
    stop_L =  - delay_L-temp+nbframe;
    delay_LF = finddelay(LF_force_200(start_L:stop_L),F_Xp.LFoot(:,end));
end

if start_L-delay_LF+nbframe-1 >  length(LF_force_200)
    delay_LF=delay_RF;
end

RF_force_synch=RF_force_200(:,start_R-delay_RF:start_R-delay_RF+nbframe-1);
LF_force_synch=LF_force_200(:,start_L-delay_LF:start_L-delay_LF+nbframe-1);

figure 
hold on
plot(RF_force_synch)
plot(LF_force_synch)
plot(F_Xp.LFoot(:,end))
plot(F_Xp.RFoot(:,end))

delay_RF_bis = finddelay(RF_force_synch,F_Xp.RFoot(:,end));
delay_LF_bis = finddelay(LF_force_synch,F_Xp.LFoot(:,end));

delay_RF=delay_RF+delay_RF_bis;
delay_LF=delay_LF+delay_LF_bis;
% 

% RF_force_synch=RF_force_200(:,start_R-delay_RF-delay_RF_bis:start_R-delay_RF-delay_RF_bis+nbframe-1);
% LF_force_synch=LF_force_200(:,start_L-delay_LF-delay_LF_bis:start_L-delay_LF-delay_LF_bis+nbframe-1);

RF_force_synch=RF_force_200(:,start_R-delay_RF:start_R-delay_RF+nbframe-1);
LF_force_synch=LF_force_200(:,start_L-delay_LF:start_L-delay_LF+nbframe-1);

figure 
hold on
plot(RF_force_synch)
plot(LF_force_synch)
plot(F_Xp.LFoot(:,end))
plot(F_Xp.RFoot(:,end))

Pressure_synch(1:16,:)=Pressure_200(1:16,start_L-delay_LF:start_L-delay_LF+nbframe-1);
Pressure_synch(17:32,:)=Pressure_200(17:32,start_R-delay_RF:start_R-delay_RF+nbframe-1);

CoP_synch(3:4,:)=CoP_200(3:4,start_R-delay_RF:start_R-delay_RF+nbframe-1);
CoP_synch(1:2,:)=CoP_200(1:2,start_L-delay_LF:start_L-delay_LF+nbframe-1);



%% Tableau contact from pressur synch
Contact_detection = isinf(Pressure_synch*inf);


%% Retirer point illogiques

%Tableau de groupement de points
Orteil_1=[9,10,11,12,13,14,15,16];
Orteil_2=Orteil_1+ones(1,length(Orteil_1))*16;

Talon_1=[1,2,3,4];
Talon_2=Talon_1+ones(1,length(Talon_1))*16;

Milieu_1=[5,6,7,8];
Milieu_2=Milieu_1+ones(1,length(Milieu_1))*16;

for i = 1 : nbframe
    if sum(Contact_detection(Orteil_1,i))<3
        Contact_detection(Orteil_1,i)=zeros(length(Orteil_1),1);
    end
    if sum(Contact_detection(Orteil_2,i))<3
        Contact_detection(Orteil_2,i)=zeros(length(Orteil_2),1);
    end  
    if sum(Contact_detection(Talon_1,i))<2
        Contact_detection(Talon_1,i)=zeros(length(Talon_1),1);
    end
    if sum(Contact_detection(Talon_2,i))<2
        Contact_detection(Talon_2,i)=zeros(length(Talon_2),1);
    end
    
    if sum(Contact_detection(Milieu_1,i))<2
        Contact_detection(Milieu_1,i)=zeros(length(Milieu_1),1);
    end
    if sum(Contact_detection(Milieu_2,i))<2
        Contact_detection(Milieu_2,i)=zeros(length(Milieu_2),1);
    end
end




%% CoP no contact = 0
CoP_Pos=CoP_synch;

Gauche=sum(Contact_detection(1:16,:),1);
Droite=sum(Contact_detection(17:32,:),1);
plot(Gauche*100)
plot(Droite*100)


end

