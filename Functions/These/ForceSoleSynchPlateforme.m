function [LF_force_synch, RF_force_synch] = ForceSoleSynchPlateforme(filename)
%   INPUT
%   - filename: name of the file to process (character string)
%   - AnalysisParameters: parameters of the musculoskeletal analysis,
%   automatically generated by the graphic interface 'Analysis' 
%   - BiomechanicalModel: musculoskeletal model
%   - ModelParameters: parameters of the musculoskeletal model, automatically
%   generated by the graphic interface 'GenerateParameters' 
%   OUTPUT
%   - ContactDetectionSole: results of the detection
%   of contact (see the Documentation for the structure)
%________________________________________________________
%
% Licence
% Toolbox distributed under GPL 3.0 Licence
%________________________________________________________
%
% Authors : Antoine Muller, Charles Pontonnier, Pauline Morin and
% Georges Dumont
%________________________________________________________

file=filename;
load('AnalysisParameters.mat')
filename=file;
AnalysisParameters.ExternalForces.Options{2,1}='RFoot';
AnalysisParameters.ExternalForces.Options{1,1}='LFoot';

% Get the solid names on which the forces are applied
Solids = AnalysisParameters.ExternalForces.Options;

% Loading the Biomechanicalmodel file
load('BiomechanicalModel.mat')
Human_model = BiomechanicalModel.OsteoArticularModel;


% Solid list extracted from the OsteoarticularModel
Solid_list = {BiomechanicalModel.OsteoArticularModel.name}';

% Get the numbers of solids on which the forces are applied
[~,num_s]=intersect(Solid_list,Solids);

% Loading external forces computation
load(fullfile(filename,'ExternalForcesComputationResults.mat'))


% Load experimental forces and forces from prediction algorithm.
GRF_Xp=ExternalForcesComputationResults.ExternalForcesExperiments;

load([filename '/InverseKinematicsResults.mat']); %#ok<LOAD>
q = InverseKinematicsResults.JointCoordinates';
if isfield(InverseKinematicsResults,'FreeJointCoordinates')
    q6dof = InverseKinematicsResults.FreeJointCoordinates';
else
    PelvisPosition = InverseKinematicsResults.PelvisPosition;
    PelvisOrientation = InverseKinematicsResults.PelvisOrientation;
end
load([filename '/ExperimentalData.mat']); %#ok<LOAD>


time = ExperimentalData.Time;
freq=1/time(2);
nbframe=size(q,1);

%% get rid of the 6DOF joint
if isfield(InverseKinematicsResults,'FreeJointCoordinates')
    Human_model(Human_model(end).child).mother = 0;
    Human_model=Human_model(1:(numel(Human_model)-6));
end

dt=1/freq;
dq=derivee2(dt,q);  % vitesses
ddq=derivee2(dt,dq);  % accélérations

%% Définition des données cinématiques du pelvis
% (position / vitesse / accélération / orientation / vitesse angulaire / accélération angulaire)
% Kinematical data for Pelvis (Position/speed/acceleration/angles/angular speed/angular acceleration)

if isfield(InverseKinematicsResults,'FreeJointCoordinates')
    p_pelvis=q6dof(:,1:3);  % frame i : p_pelvis(i,:)
    r_pelvis=cell(size(q6dof,1),1);
    for i=1:size(q6dof,1)
        r_pelvis{i}=Rodrigues([1 0 0]',q6dof(i,4))*Rodrigues([0 1 0]',q6dof(i,5))*Rodrigues([0 0 1]',q6dof(i,6)); % matrice de rotation en fonction des rotations successives (x,y,z) : frame i : r_pelvis{i}
    end
else
    p_pelvis = cell2mat(PelvisPosition)';
    r_pelvis  = PelvisOrientation';
end

%dR
dR=zeros(3,3,nbframe);
for ligne=1:3
    for colonne=1:3
        dR(ligne,colonne,:)=derivee2(dt,cell2mat(cellfun(@(b) b(ligne,colonne),r_pelvis,'UniformOutput',false)));
    end
end
w=zeros(nbframe,3);
for i=1:nbframe
    wmat=dR(:,:,i)*r_pelvis{i}';
    w(i,:)=[wmat(3,2),wmat(1,3),wmat(2,1)];
end

% v0
v=derivee2(dt,p_pelvis);
vw=zeros(nbframe,3);
for i=1:nbframe
    vw(i,:)=cross(p_pelvis(i,:),w(i,:));
end
v0=v+vw;

% dv0
dv0=derivee2(dt,v0);

% dw
dw=derivee2(dt,w);

%% Creation of a structure to add contact points
for i=1:numel(AnalysisParameters.Prediction.ContactPoint)
    Prediction(i).points_prediction_efforts = AnalysisParameters.Prediction.ContactPoint{i}; %#ok<AGROW>
end

Prediction=verif_Prediction_Humanmodel(Human_model,Prediction);
NbPointsPrediction = numel(Prediction);


%% Loading external forces computation
load(fullfile(filename,'ExternalForcesComputationResults.mat'))
load(fullfile(filename,'ExperimentalData.mat'))
start = floor(ExperimentalData.FirstFrame/2) + 55;
%start = floor(ExperimentalData.FirstFrame/2) + 25;


AnalysisParameters.ExternalForces.Options(1,1)={'LFoot'};
AnalysisParameters.ExternalForces.Options(2,1)={'RFoot'};

% Get the solid names on which the forces are applied
Solids = AnalysisParameters.ExternalForces.Options;

% Loading the Biomechanicalmodel file
load('BiomechanicalModel.mat')

% Solid list extracted from the OsteoarticularModel
Solid_list = {BiomechanicalModel.OsteoArticularModel.name}';

% Get the numbers of solids on which the forces are applied
[~,num_s]=intersect(Solid_list,Solids);

%% Loading data
data_full=importdata([filename '.txt']);

data = data_full.data(start:end,:);

g=9.81;
f_cut=5;

%% Number frame
%load([filename '/ExperimentalData.mat']); %#ok<LOAD>
time = ExperimentalData.Time;

freq=1/time(2);
nbframe= size(time,2);

%% Creation of a structure to add contact points
for i=1:numel(AnalysisParameters.Prediction.ContactPoint)
    Prediction(i).points_prediction_efforts = AnalysisParameters.Prediction.ContactPoint{i}; %#ok<AGROW>
end

Prediction=verif_Prediction_Humanmodel(Human_model,Prediction);
NbPointsPrediction = numel(Prediction);

%% Pressure data 
nbframe_pressure = size(data,1);

Pressure_data=zeros(NbPointsPrediction, nbframe_pressure);
                       
table_correspondance_LF = [1 2 3 4 5 6  7  8  9  10 11 12 13 14 15 16;
                           1 2 3 4 5 6  7  8  9  10 11 12 13 14 15 16];
table_correspondance_RF = [1 2 3 4 5 6  7  8  9  10 11 12 13 14 15 16;
                           1 2 3 4 5 6  7  8  9  10 11 12 13 14 15 16];

table_correspondance_RF(1, :) = table_correspondance_RF(1, :)+16*ones(1,16);

for i = 1:16
    Pressure_data(table_correspondance_LF(1,i),:)=data(:,table_correspondance_LF(2,i)+1)';
    Pressure_data(table_correspondance_RF(1,i),:)=data(:,table_correspondance_LF(2,i)+23)';
end

%% Position CoP
liste=[22,23,44,45];
CoP=[data(:,liste)]';

%% NaN et bruit, les semelles ont un code qui détecte le contact et 
%renseigne la position du CoP à l'origine s'il n'y a pas de contact
for i = 2 : nbframe_pressure
    if CoP(1,i)==0 && CoP(2,i)==0
        Pressure_data(1:16,i)=zeros(16,1);
    end
    if CoP(3,i)==0 && CoP(4,i)==0
        Pressure_data(17:32,i)=zeros(16,1);
    end
    if isnan(CoP(3,i))
        CoP(3:4,i) = CoP(3:4,i-1);
    end
        if isnan(CoP(1,i))
        CoP(1:2,i) = CoP(1:2,i-1);
    end
end

%Pressure_data(isnan(Pressure_data)|Pressure_data<=1.5)=0;

Pressure_data(Pressure_data<=1.5)=0;
Pressure_data(isnan(Pressure_data))=1;

for i = 1:32
    for j=3:nbframe_pressure-2
        if (Pressure_data(i,j-1)==0||Pressure_data(i,j-2)==0) && (Pressure_data(i,j+1)==0||Pressure_data(i,j+2)==0)
            Pressure_data(i,j)=0;
        end
    end
end


% interpoler 200Hz
Pressure_200 = double_freq(Pressure_data);
CoP_200 = double_freq(CoP);

%% External forces data
LF_force=data(:,21)';
RF_force=data(:,43)';

% interpoler 200Hz
LF_force_200 = double_freq(LF_force);
RF_force_200 = double_freq(RF_force);

LF_force_200(isnan(LF_force_200))=0;
RF_force_200(isnan(RF_force_200))=0;

LF_force_200=filt_data(LF_force_200', f_cut, freq)';
RF_force_200=filt_data(RF_force_200', f_cut, freq)';

%% Acc data
LF_acc=data(:,18:20)'*(g);
RF_acc=data(:,40:42)'*(g);

% interpoler 200Hz
LF_acc_200 = double_freq(LF_acc)';
RF_acc_200 = double_freq(RF_acc)';

LF_acc_200(isnan(LF_acc_200))=0;
RF_acc_200(isnan(RF_acc_200))=0;

% LF_acc_200=filt_data(LF_acc_200, f_cut, freq);
% RF_acc_200=filt_data(RF_acc_200, f_cut, freq);


%% Synchro acceleration
Acc_LF = zeros(nbframe,3);
Acc_RF = zeros(nbframe,3);

insole_foot_left = [0 -1 0;
    0  0 -1;
    1 0  0];

insole_foot_right = [0 -1 0;
    0  0 1;
    1 0  0];

for i=1:nbframe
    %attribution à chaque articulation de la position/vitesse/accélération (position/speed/acceleration for each joint)
    Human_model(1).p=p_pelvis(i,:)';
    Human_model(1).R=r_pelvis{i};
    Human_model(1).v0=v0(i,:)';
    Human_model(1).w=w(i,:)';
    Human_model(1).dv0=dv0(i,:)';
    Human_model(1).dw=dw(i,:)';
    for j=2:numel(Human_model)
        Human_model(j).q=q(i,j); %#ok<*SAGROW>
        Human_model(j).dq=dq(i,j);
        Human_model(j).ddq=ddq(i,j);
    end
    % Calcul positions / vitesses / accélération de chaque solide (computation of position/speed/acceleration for each solid)
    [Human_model,Prediction] = ForwardAllKinematicsPrediction(Human_model,Prediction,1); 
    
    Acc_LF(i,:) = (insole_foot_left)*inv(Human_model(num_s(1)).R)*[0;0;1]*g;
    Acc_RF(i,:) = (insole_foot_right)*inv(Human_model(num_s(2)).R)*[0;0;1]*g;

   % V_LF(i,:) = (insole_foot_left)*inv(Human_model(num_s(1)).R)*Prediction(14).vitesse ;
    %V_RF(i,:) = (insole_foot_right)*inv(Human_model(num_s(2)).R)*Prediction(30).vitesse ;
     V_LF(i,:) = (insole_foot_left)*inv(Human_model(num_s(1)).R)*Prediction(7).vitesse ;
    V_RF(i,:) = (insole_foot_right)*inv(Human_model(num_s(2)).R)*Prediction(23).vitesse ;
    
end

Acc_LF = Acc_LF(1:end-1,:)+diff(V_LF)/(1/freq);
Acc_RF = Acc_RF(1:end-1,:)+diff(V_RF)/(1/freq);

% delay_R = finddelay(RF_acc_200,Acc_RF);
% delay_L = finddelay(LF_acc_200,Acc_LF);

% delay_R = delay_R(1);
% delay_L = delay_L(1);

RF_acc_200_norm = [];
LF_acc_200_norm = [];

for i = 1: length(RF_acc_200)
    RF_acc_200_norm = [RF_acc_200_norm, norm(RF_acc_200(i,:))];
    LF_acc_200_norm = [LF_acc_200_norm, norm(LF_acc_200(i,:))];
end

RF_acc_200_norm=filt_data(RF_acc_200_norm', f_cut, freq);
LF_acc_200_norm=filt_data(LF_acc_200_norm', f_cut, freq);

Acc_RF_norm=[];
Acc_LF_norm=[];

for i = 1: length(Acc_RF)
    Acc_RF_norm = [Acc_RF_norm, norm(Acc_RF(i,:))];
    Acc_LF_norm = [Acc_LF_norm, norm(Acc_LF(i,:))];
end

% [a,b,delay_R]=findsignal(RF_acc_200_norm,Acc_RF_norm);
% 
% [a,b,delay_R]=findsignal(RF_acc_200_norm,Acc_RF_norm(1:nbframe-20),'TimeAlignment','edr','EDRTolerance',0.1, ...
%     'Metric','absolute','Normalization','zscore','NormalizationLength',nbframe, ...
%     'Annotate','all');
% 
% [a,b,delay_L]=findsignal(LF_acc_200_norm,Acc_LF_norm(1:nbframe-20),'TimeAlignment','edr','EDRTolerance',0.1, ...
%     'Metric','absolute', ...
%     'Annotate','all');
coconut = 30;
pop=30;
% 
% [delay_L,b,c]=findsignal(LF_acc_200_norm(coconut:nbframe_pressure*2),Acc_LF_norm(pop:nbframe-pop), ...
%      'TimeAlignment','edr','EDRTolerance',1,'Normalization','zscore','NormalizationLength',nbframe,'Metric','absolute','Annotate','all');

[delay_L,b,c]=findsignal(LF_acc_200_norm(coconut:nbframe_pressure*2-coconut),Acc_LF_norm(pop:nbframe-pop), ...
    'Normalization','zscore','NormalizationLength',nbframe,'Metric','absolute','Annotate','all');

 
%  
% [delay_R,b,c]=findsignal(RF_acc_200_norm(coconut:nbframe_pressure*2),Acc_RF_norm(pop:nbframe-pop), ...
%      'TimeAlignment','edr','EDRTolerance',1,'Normalization','zscore','NormalizationLength',nbframe,'Metric','absolute','Annotate','all');

 
[delay_R,b,c]=findsignal(RF_acc_200_norm(coconut:nbframe_pressure*2-coconut),Acc_RF_norm(pop:nbframe-pop), ...
     'Normalization','zscore','NormalizationLength',nbframe,'Metric','absolute','Annotate','all');

 
delay_R=-delay_R-coconut+pop;
delay_L=-delay_L-coconut+pop;


% findsignal(RF_acc_200_norm,Acc_RF_norm,'Normalization','zscore','Annotate','all')
% 
% delay_R = finddelay(RF_acc_200_norm,Acc_RF_norm(1:nbframe-20),maxlag);
% delay_L = finddelay(LF_acc_200_norm,Acc_LF_norm(1:nbframe-20),maxlag);
% 
% delay_R = finddelay(RF_acc_200_norm,Acc_RF_norm);
% delay_L = finddelay(LF_acc_200_norm,Acc_LF_norm);


if -delay_L+nbframe>2*nbframe_pressure || -delay_L<0 || delay_L==0
    delay_L=delay_R;
end

if -delay_R+nbframe>2*nbframe_pressure || -delay_R<0 || delay_R==0
    delay_R=delay_L;
end
    

RF_acc_synch=RF_acc_200(-delay_R:-delay_R+nbframe,:);
LF_acc_synch=LF_acc_200(-delay_L:-delay_L+nbframe,:);


% figure 
% hold on
% plot(RF_acc_synch(:,1))
% %plot(LF_acc_synch(:,1))
% %plot(Acc_LF(:,1))
% plot(Acc_RF(:,1))
% 
% figure 
% hold on
% plot(RF_acc_synch(:,2))
% plot(LF_acc_synch(:,2))
% plot(Acc_LF(:,2))
% plot(Acc_RF(:,2))
% 
% figure 
% hold on
% %plot(RF_acc_synch(:,3))
% plot(LF_acc_synch(:,3))
% plot(Acc_LF(:,3))
% %plot(Acc_RF(:,3))



%% External forces from platform
GRF_Xp=ExternalForcesComputationResults.ExternalForcesExperiments;

% Get the forces applied on the solids
for ii=1:numel(num_s)
    cur_s=num_s(ii); %LFoot and RFoot
    for jj_f=1:nbframe
        % Experimental results
        F_Xp.(Solids{ii})(jj_f,:) = GRF_Xp(jj_f).fext(cur_s).fext(:,1)';
    end
end

 temp=0;

%  a=20;
%  if nbframe>2*a
%      temp = a;
%  end
 
 start_L = - delay_L+temp;
 start_R = -delay_R+temp;
 stop_L =  - delay_L-temp+nbframe;
 stop_R = - delay_R-temp+nbframe;
 
%  if norm (delay_L-delay_R) > 40
%      if  (delay_L-delay_R) > 40
%         start_R = - delay_R;
%          stop_L = - delay_L+nbframe;
%      elseif (delay_L-delay_R) < -40
%          start_L = - delay_L;
%          stop_R = - delay_R+nbframe;
%      end
%  end
 
if norm (delay_L-delay_R) > 40
    start_R = min(start_R,start_L);
    start_L = min(start_R,start_L);
    stop_L = max(stop_R,stop_L);
    stop_L = max(stop_R,stop_L);
end

 corn = 60;
 
[delay_RF,b,c]=findsignal(RF_force_200(start_R:stop_R),F_Xp.RFoot(corn:nbframe-corn,end), ...
     'Normalization','zscore','NormalizationLength',nbframe,'Metric','absolute','Annotate','all');
[delay_LF,b,c]=findsignal(LF_force_200(start_L:stop_L),F_Xp.LFoot(corn:nbframe-corn,end), ...
     'Normalization','zscore','NormalizationLength',nbframe,'Metric','absolute','Annotate','all');

delay_RF=-delay_RF+corn;
delay_LF=-delay_LF+corn;
%  
% delay_RF = finddelay(RF_force_200(start_R:stop_R),F_Xp.RFoot(:,end));
% delay_LF = finddelay(LF_force_200(start_L:stop_L),F_Xp.LFoot(:,end));
% 
% delay_RF=delay_RF+corn;
% delay_LF=delay_LF+corn;


 
% 
% delay_RF = 0;
% delay_LF = 0;

% 
% if -delay_LF > 150
%     delay_LF=delay_RF;
% end
% if -delay_RF > 150
%     delay_RF=delay_LF;
% end

if start_L-delay_LF+nbframe-1>2*nbframe_pressure || start_L-delay_LF<0
    delay_LF=delay_RF;
    delay_L=delay_R;
end

if start_R-delay_RF+nbframe-1>2*nbframe_pressure || start_R-delay_RF<0 
    delay_RF=delay_LF;
    delay_R=delay_L;
end


if start_R-delay_RF+nbframe-1>2*nbframe_pressure || start_R-delay_RF<0
    delay_RF=0;
    delay_LF=0;
end

RF_force_synch=RF_force_200(:,start_R-delay_RF:start_R-delay_RF+nbframe-1);
LF_force_synch=LF_force_200(:,start_L-delay_LF:start_L-delay_LF+nbframe-1);

delay_RF_bis = finddelay(RF_force_synch,F_Xp.RFoot(:,end));
delay_LF_bis = finddelay(LF_force_synch,F_Xp.LFoot(:,end));
% 
if norm(delay_RF_bis)>150
    delay_RF_bis = 0;
end
if norm(delay_LF_bis)>150
    delay_LF_bis = 0;
end
%      delay_RF=delay_RF+delay_RF_bis;
%      delay_LF=delay_LF+delay_LF_bis;
% RF_force_synch=RF_force_200(:,start_R-delay_RF-delay_RF_bis:start_R-delay_RF-delay_RF_bis+nbframe-1);
% LF_force_synch=LF_force_200(:,start_L-delay_LF-delay_LF_bis:start_L-delay_LF-delay_LF_bis+nbframe-1);

% if norm(delay_RF+delay_RF_bis-delay_LF+delay_LF_bis)<20
%     delay_RF=delay_RF+delay_RF_bis;
%     delay_LF=delay_LF+delay_LF_bis;
% else
%     delay_RF_bis = 0;
%     delay_LF_bis = 0;
%     delay_RF=delay_RF+delay_RF_bis;
%     delay_LF=delay_LF+delay_LF_bis;
% end

if start_L-delay_LF-delay_LF_bis+nbframe>2*nbframe_pressure || start_L-delay_LF_bis-delay_LF<0
    delay_LF_bis = 0;
end

if start_R-delay_RF-delay_RF_bis+nbframe>2*nbframe_pressure || start_R-delay_RF_bis-delay_RF<0
    delay_RF_bis = 0;
end

    delay_RF=delay_RF+delay_RF_bis;
    delay_LF=delay_LF+delay_LF_bis;

RF_force_synch=RF_force_200(:,start_R-delay_RF:start_R-delay_RF+nbframe-1);
LF_force_synch=LF_force_200(:,start_L-delay_LF:start_L-delay_LF+nbframe-1);


% figure
% plot(RF_force_200)
% hold on
% RF_force_200(:,1:start_R-delay_RF)=NaN;
% RF_force_200(:,start_R-delay_RF+nbframe-1:end)=NaN;
% plot(RF_force_200)
% 
% plot(LF_force_200)
% hold on
% LF_force_200(:,1:start_L-delay_LF)=NaN;
% LF_force_200(:,start_L-delay_LF+nbframe-1:end)=NaN;
% plot(LF_force_200)
% % 
% figure 
% set(gca,'color','w')
% set(gcf,'color','w')
% hold on
% plot(RF_force_synch)
% plot(LF_force_synch)
% plot(F_Xp.LFoot(:,end))
% plot(F_Xp.RFoot(:,end))
% ylabel('Resultante verticale (N)')
% xlabel('Temps (frame)')
% legend('Pied droit semelle','Pied gauche semelle','Pied Gauche plateforme','Pied droit plateforme')


end


